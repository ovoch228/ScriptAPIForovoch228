local API = {}
getgenv().seconds = 0 -- not seconds, now 100 millseconds
--Lobby = 3260590327; Game: 5591597781


    function API:waitMap(map)
        for i, v in game.Players.LocalPlayer.PlayerGui:WaitForChild("ReactLobbyElevator"):GetDescendants() do
            while true do
                if v.Name == "title" and v.Text == map then
                    break
                else
                    task.wait(0.05)
                end
            end

            if v.Name == "title" and v.Text == map then
                local elevator = v.Parent.Parent.Adornee.Parent
                local playerCount = v.Parent.timer.players.Text
    
                local playerCountTable = {"2/4", "3/4", "4/4", "2/6", "3/6", "4/6"}
    
                local args = {
                    [1] = elevator
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Elevators"):WaitForChild("RF:Enter"):InvokeServer(unpack(args))
                for i, v in pairs(playerCountTable) do
                    while true do
                        if playerCountTable == v then
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Elevators"):WaitForChild("RF:Leave"):InvokeServer()
                        else
                            local args = {
                                [1] = elevator
                            }
                            
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Elevators"):WaitForChild("RF:Enter"):InvokeServer(unpack(args))
                            task.wait(0.03)
                        end 
                        task.wait(0.05)
                    end
                end
            else
                task.wait(0.1)
            end
        end
    end



    local topBar = game.Players.LocalPlayer.PlayerGui:WaitForChild("ReactGameTopGameDisplay").Frame
    local Wave = topBar.wave.container.value  
    local difficultyUI = game.Players.LocalPlayer.PlayerGui:WaitForChild("ReactGameDifficulty")
    local towers = workspace:WaitForChild("Towers")

    while true do
        if difficultyUI.Frame.buttons.casualButton.Visible == false then
            break
        else
            task.wait(0.03)
        end
        task.wait(0.04)
    end

    function API:Start()
        while true do
            if difficultyUI.Frame.buttons.casualButton.Visible == false then
                break
            else
                task.wait(0.03)
            end
        end

        local function startSecundomer()
            getgenv().seconds = 0
            local start = DateTime.now().UnixTimestampMillis
        
            spawn(function()
                while true do
                    getgenv().seconds = DateTime.now().UnixTimestampMillis - start
                    task.wait(0.04)
                end
            end)
        end

        Wave:GetPropertyChangedSignal("Text"):Connect(startSecundomer)
    end

    function API:Difficulty(diff)
        local args = {
            [1] = "Difficulty",
            [2] = "Vote",
            [3] = diff
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
        task.wait(0.03)
        local args = {
            [1] = "Difficulty",
            [2] = "Ready"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))    
    end

    function API:Place(tower, index, x, y, z, wave, seconds)
        while true do
            if Wave.Text == tostring(wave) and getgenv().seconds == seconds then
                local args = {
                    [1] = "Troops",
                    [2] = "Pl\208\176ce",
                    [3] = {
                        ["Rotation"] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),
                        ["Position"] = Vector3.new(x, y, z)
                    },
                    [4] = tower
                }
            
                game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
                local addedTower
                addedTower = towers.ChildAdded:Connect(function(tower)
                    local Index = Instance.new("IntValue", tower)
                    Index.Value = index
                    Index.Name = "index"
            
                    addedTower:Disconnect()
                end) 
                break
            else
            task.wait(0.03)
        end
            task.wait(0.03)
        end


        
    end

    function API:Upgrade(index, wave, seconds)
        while true do
            if Wave.Text == tostring(wave) and getgenv().seconds == seconds then
                for i, v in towers:GetDescendants() do
                    if v:IsA("IntValue") and v.Name == "index" and v.Value == index then
                        local args = {
                            [1] = "Troops",
                            [2] = "Upgrade",
                            [3] = "Set",
                            [4] = {
                                ["Troop"] = v.Parent,
                                ["Path"] = 1
                            }
                            }
                        
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
                        break
                    end
                end    
        else
            task.wait(0.03)
        end
            task.wait(0.03)
        end
    end

    function API:Target(index, target, wave, seconds)
        while true do
            if Wave.Text == tostring(wave) and getgenv().seconds == seconds then
                for i, v in towers:GetDescendants() do
                    if v:IsA("IntValue") and v.Name == "index" and v.Value == index then
                        local args = {
                            [1] = "Troops",
                            [2] = "Target",
                            [3] = "Set",
                            [4] = {
                                ["Troop"] = v.Parent,
                                ["Target"] = target
                            }
                        }
                        
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
                        break
                    end
                end
            else
                task.wait(0.03)
            end
            task.wait(0.03)
        end
    end

    function API:Sell(index, wave, seconds)
        while true do
            if Wave.Text == tostring(wave) and getgenv().seconds == seconds then
                for i, v in towers:GetDescendants() do
                    if v:IsA("IntValue") and v.Name == "index" and v.Value == index then
                        local args = {
                            [1] = "Troops",
                            [2] = "Sell",
                            [3] = {
                                ["Troop"] = v.Parent
                            }
                        }
                        
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
                    end
                    break
                end
            else
                task.wait(0.06)
            end
            task.wait(0.03)
        end
    end

    function API:Skip(wave, seconds)
        while true do
            if Wave.Text == tostring(wave) and getgenv().seconds == seconds then
                local args = {
                    [1] = "Voting",
                    [2] = "Skip"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
            else 
                task.wait(0.05)
            end
            task.wait(0.03)
        end
end

--other code


--[[

local args = {
    [1] = "Difficulty",
    [2] = "Ready"
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))


local args = {
    [1] = "Difficulty",
    [2] = "Vote",
    [3] = "Easy"
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))

local args = {
    [1] = "Multiplayer",
    [2] = "v2:start",
    [3] = {
        ["difficulty"] = "Easy",
        ["mode"] = "survival",
        ["count"] = 1
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))


 ..Tower..", "..Position.X..", "..Position.Y..", "..Position.Z..", "..Wave..", "..getgenv().seconds.."\n");
                

    local args = {
        [1] = "Troops",
        [2] = "Pl\208\176ce",
        [3] = {
            ["Rotation"] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),
            ["Position"] = Vector3.new(8.867898941040039, 1.0000044107437134, -27.135082244873047)
        },
        [4] = "Scout"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))

        if args[2] == "Pl\208\176ce" then
            local addedTower
            local Tower = args[4]
            local Position = args[3].Position

            addedTower = towers.ChildAdded:Connect(function(tower)
                totalPlacedTowers = totalPlacedTowers + 1
                local indexTower = totalPlacedTowers
                local Index = Instance.new("IntValue", tower)
                Index.Value = indexTower
                Index.Name = "index"
                
                appendfile(getgenv().StratName..".txt", getgenv().APIVar..":Place("..Tower..", "..Position.X..", "..Position.Y..", "..Position.Z..", "..Wave..", "..getgenv().seconds.."\n");
                LastLog.Text = "Placed Tower:" .. args[4]

                addedTower:Disconnect()
            end)
            print(addedTower)
]]
