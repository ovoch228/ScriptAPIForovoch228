local API = {}
getgenv().seconds = 0 -- not seconds, now 100 millseconds
--Lobby = 3260590327; Game: 5591597781
function API:waitMap(map)
    if game.PlaceId == 3260590327 then
        print'used'
        while true do
            for i, v in game.Players.LocalPlayer.PlayerGui:WaitForChild("ReactLobbyElevator"):GetDescendants() do
                if v.Name == "title" then
                    if v.Text == map then
                        
                local elevator = v.Parent.Parent.Adornee.Parent
                local playerCount = v.Parent.timer.players.Text
    
                local playerCountTable = {"2/4", "3/4", "4/4", "2/6", "3/6", "4/6"}
        
                for i, v in pairs(playerCountTable) do
                    while true do
                        if playerCountTable == v then
                            API:waitMap(map)
                            break
                        else
                            local args = {
                                [1] = elevator
                            }
                                
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Elevators"):WaitForChild("RF:Enter"):InvokeServer(unpack(args))
                            task.wait(0.03)
                        end 
                        task.wait(0.05)
                    end
                end
                    end
                else
                    task.wait(0.05)
                end
            end
        end
    else
        --nothing
    end
end




function API:Start()
    if game.PlaceId == 5591597781 then
        while true do
            if game.Players.LocalPlayer.PlayerGui.ReactGameDifficulty.Frame.buttons.casualButton.Visible == false then
                break
            else
                task.wait(0.03)
            end
        end
    end
end

    function API:Difficulty(diff)
        if game.PlaceId == 5591597781 then
        local args = {
            [1] = "Difficulty",
            [2] = "Vote",
            [3] = diff
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
        task.wait(0.03)
        local args = {
            [1] = "Difficulty",
            [2] = "Ready"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))    
    end
end

    function API:Place(tower, index, x, y, z, wave, seconds)
        if game.PlaceId == 5591597781 then
            while true do
                if game.Players.LocalPlayer.PlayerGui.ReactGameTopGameDisplay.Frame.wave.container.value.Text == tostring(wave) and game:GetService("ReplicatedStorage").State.Timer.Time.Value == seconds then
                    local args = {
                        [1] = "Troops",
                        [2] = "Pl\208\176ce",
                        [3] = {
                            ["Rotation"] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),
                            ["Position"] = Vector3.new(x, y, z)
                        },
                        [4] = tower
                    }
                
                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args)) 

                    local addedTower
                    addedTower = workspace.Towers.ChildAdded:Connect(function(tower)
                        local Index = Instance.new("IntValue", tower)
                        Index.Value = index
                        Index.Name = "index"
                
                        addedTower:Disconnect()
                    end) 

                    break
                else
                task.wait(0.03)
            end
                task.wait(0.03)
        end
    end
end

    function API:Upgrade(index, wave, seconds)
        if game.PlaceId == 5591597781 then
        while true do
            if game.Players.LocalPlayer.PlayerGui.ReactGameTopGameDisplay.Frame.wave.container.value.Text == tostring(wave) and game:GetService("ReplicatedStorage").State.Timer.Time.Value == seconds then
                for i, v in workspace.Towers:GetDescendants() do
                    if v:IsA("IntValue") and v.Name == "index" and v.Value == index then
                        local args = {
                            [1] = "Troops",
                            [2] = "Upgrade",
                            [3] = "Set",
                            [4] = {
                                ["Troop"] = v.Parent,
                                ["Path"] = 1
                            }
                            }
                        
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
                        break
                    end
                end    
        else
            task.wait(0.03)
        end
            task.wait(0.03)
        end
    end
end

    function API:Target(index, target, wave, seconds)
        if game.PlaceId == 5591597781 then
        while true do
            if game.Players.LocalPlayer.PlayerGui.ReactGameTopGameDisplay.Frame.wave.container.value.Text == tostring(wave) and game:GetService("ReplicatedStorage").State.Timer.Time.Value == seconds then
                for i, v in workspace.Towers:GetDescendants() do
                    if v:IsA("IntValue") and v.Name == "index" and v.Value == index then
                        local args = {
                            [1] = "Troops",
                            [2] = "Target",
                            [3] = "Set",
                            [4] = {
                                ["Troop"] = v.Parent,
                                ["Target"] = target
                            }
                        }
                        
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
                        break
                    end
                end
            else
                task.wait(0.03)
            end
            task.wait(0.03)
        end
    end
end

    function API:Sell(index, wave, seconds)
        while true do
            if game.Players.LocalPlayer.PlayerGui.ReactGameTopGameDisplay.Frame.wave.container.value.Text == tostring(wave) and game:GetService("ReplicatedStorage").State.Timer.Time.Value == seconds then
                for i, v in workspace.Towers:GetDescendants() do
                    if v:IsA("IntValue") and v.Name == "index" and v.Value == index then
                        local args = {
                            [1] = "Troops",
                            [2] = "Sell",
                            [3] = {
                                ["Troop"] = v.Parent
                            }
                        }
                        
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
                    end
                    break
                end
            else
                task.wait(0.06)
            end
            task.wait(0.03)
        end
    end

    function API:Skip(wave, seconds)
        while true do
            if game.Players.LocalPlayer.PlayerGui.ReactGameTopGameDisplay.Frame.wave.container.value.Text == tostring(wave) and game:GetService("ReplicatedStorage").State.Timer.Time.Value == seconds then
                local args = {
                    [1] = "Voting",
                    [2] = "Skip"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
            else 
                task.wait(0.05)
            end
            task.wait(0.03)
        end
end



return API
